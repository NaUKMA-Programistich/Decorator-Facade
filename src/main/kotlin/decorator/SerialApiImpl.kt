package org.example.decorator

/**
 * Конкретна реалізація SerialApi для спілкування через серійний порт.
 * Використовується для відправлення та отримання даних від певного пристрою.
 *
 * @property device пристрій, з яким буде здійснюватися взаємодія.
 */
class SerialApiImpl(private val device: Device): SerialApi {

    /**
     * Відправляє дані на пристрій.
     * Цей метод демонструє, як можна використовувати інтерфейс SerialApi
     * для відправлення даних до пристрою.
     *
     * @param data масив байт, який буде відправлено на пристрій.
     */
    override fun send(data: ByteArray) {
        // Логування інформації про відправлення даних
        println("Sending data to ${device.name}")
    }

    /**
     * Отримує дані з пристрою.
     * Цей метод імітує отримання даних від пристрою та повертає
     * заздалегідь визначений масив байт.
     *
     * @return масив байт, отриманий від пристрою.
     */
    override fun receive(): ByteArray {
        // Логування інформації про отримання даних
        println("Receiving data from ${device.name}")
        // Повертаємо заздалегідь визначений масив байт
        return ByteArray(0x01) // Приклад отриманого відповіді
    }

    /**
     * Повертає швидкість з'єднання.
     * Цей метод повертає фіксовану швидкість з'єднання для прикладу.
     *
     * @return швидкість з'єднання.
     */
    override fun getSpeed(): Int {
        // Повертаємо фіксовану швидкість з'єднання
        return 9600 // Швидкість з'єднання для прикладу
    }
}
