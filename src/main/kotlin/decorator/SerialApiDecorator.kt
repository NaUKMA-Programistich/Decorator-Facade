package org.example.decorator

/**
 * Абстрактний декоратор для класу SerialApi, що дозволяє розширити його функціонал.
 * Декоратор "обгортає" екземпляр SerialApi, перенаправляючи всі виклики до нього,
 * але при цьому має можливість модифікувати або розширювати ці виклики.
 *
 * @property wrapper обгортка над екземпляром SerialApi, до якого будуть перенаправлені виклики.
 */
open class SerialApiDecorator(private val wrapper: SerialApi) : SerialApi {

    /**
     * Відправляє дані через серійний інтерфейс.
     * Метод перенаправляє виклик до обгорнутого екземпляра SerialApi,
     * дозволяючи перед цим внести модифікації в дані або логіку відправлення.
     *
     * @param data масив байтів, які потрібно відправити.
     */
    override fun send(data: ByteArray) {
        wrapper.send(data)
    }

    /**
     * Отримує дані через серійний інтерфейс.
     * Метод перенаправляє виклик до обгорнутого екземпляра SerialApi,
     * дозволяючи модифікувати логіку отримання даних або самі дані після отримання.
     *
     * @return масив байтів, отриманих через серійний інтерфейс.
     */
    override fun receive(): ByteArray {
        return wrapper.receive()
    }

    /**
     * Повертає швидкість обміну даними через серійний інтерфейс.
     * Метод перенаправляє виклик до обгорнутого екземпляра SerialApi,
     * дозволяючи модифікувати логіку отримання швидкості або саме значення швидкості.
     *
     * @return швидкість обміну даними.
     */
    override fun getSpeed(): Int {
        return wrapper.getSpeed()
    }
}
